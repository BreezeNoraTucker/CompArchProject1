$date
	Thu Mar 14 17:56:57 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module fullAdder_tb $end
$var wire 1 ! out $end
$var wire 1 " cout $end
$var reg 1 # a $end
$var reg 1 $ b $end
$var reg 1 % cin $end
$scope module Adder $end
$var wire 1 # a $end
$var wire 1 & aOb $end
$var wire 1 ' aXb $end
$var wire 1 ( aXbANDcin $end
$var wire 1 $ b $end
$var wire 1 % cin $end
$var wire 1 " cout $end
$var wire 1 ! out $end
$upscope $end
$upscope $end
$scope module halfAdder_tb $end
$var wire 1 ) out $end
$var wire 1 * cout $end
$var reg 1 + a $end
$var reg 1 , b $end
$scope module Adder $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 * c $end
$var wire 1 ) out $end
$upscope $end
$upscope $end
$scope module twentyBitAdd_tb $end
$var wire 20 - out [19:0] $end
$var wire 1 . cout $end
$var reg 20 / a [19:0] $end
$var reg 20 0 b [19:0] $end
$scope module Adder $end
$var wire 20 1 a [19:0] $end
$var wire 20 2 b [19:0] $end
$var wire 1 3 ground $end
$var wire 20 4 out [19:0] $end
$var wire 1 . cout $end
$var wire 20 5 carry [19:0] $end
$scope begin genblk1[1] $end
$var parameter 2 6 i $end
$scope module Adder_i $end
$var wire 1 7 a $end
$var wire 1 8 aOb $end
$var wire 1 9 aXb $end
$var wire 1 : aXbANDcin $end
$var wire 1 ; b $end
$var wire 1 < cin $end
$var wire 1 = cout $end
$var wire 1 > out $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 ? i $end
$scope module Adder_i $end
$var wire 1 @ a $end
$var wire 1 A aOb $end
$var wire 1 B aXb $end
$var wire 1 C aXbANDcin $end
$var wire 1 D b $end
$var wire 1 E cin $end
$var wire 1 F cout $end
$var wire 1 G out $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 H i $end
$scope module Adder_i $end
$var wire 1 I a $end
$var wire 1 J aOb $end
$var wire 1 K aXb $end
$var wire 1 L aXbANDcin $end
$var wire 1 M b $end
$var wire 1 N cin $end
$var wire 1 O cout $end
$var wire 1 P out $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 Q i $end
$scope module Adder_i $end
$var wire 1 R a $end
$var wire 1 S aOb $end
$var wire 1 T aXb $end
$var wire 1 U aXbANDcin $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y out $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 Z i $end
$scope module Adder_i $end
$var wire 1 [ a $end
$var wire 1 \ aOb $end
$var wire 1 ] aXb $end
$var wire 1 ^ aXbANDcin $end
$var wire 1 _ b $end
$var wire 1 ` cin $end
$var wire 1 a cout $end
$var wire 1 b out $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 c i $end
$scope module Adder_i $end
$var wire 1 d a $end
$var wire 1 e aOb $end
$var wire 1 f aXb $end
$var wire 1 g aXbANDcin $end
$var wire 1 h b $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k out $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 l i $end
$scope module Adder_i $end
$var wire 1 m a $end
$var wire 1 n aOb $end
$var wire 1 o aXb $end
$var wire 1 p aXbANDcin $end
$var wire 1 q b $end
$var wire 1 r cin $end
$var wire 1 s cout $end
$var wire 1 t out $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 u i $end
$scope module Adder_i $end
$var wire 1 v a $end
$var wire 1 w aOb $end
$var wire 1 x aXb $end
$var wire 1 y aXbANDcin $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } out $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 ~ i $end
$scope module Adder_i $end
$var wire 1 !" a $end
$var wire 1 "" aOb $end
$var wire 1 #" aXb $end
$var wire 1 $" aXbANDcin $end
$var wire 1 %" b $end
$var wire 1 &" cin $end
$var wire 1 '" cout $end
$var wire 1 (" out $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 )" i $end
$scope module Adder_i $end
$var wire 1 *" a $end
$var wire 1 +" aOb $end
$var wire 1 ," aXb $end
$var wire 1 -" aXbANDcin $end
$var wire 1 ." b $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" out $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 2" i $end
$scope module Adder_i $end
$var wire 1 3" a $end
$var wire 1 4" aOb $end
$var wire 1 5" aXb $end
$var wire 1 6" aXbANDcin $end
$var wire 1 7" b $end
$var wire 1 8" cin $end
$var wire 1 9" cout $end
$var wire 1 :" out $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 ;" i $end
$scope module Adder_i $end
$var wire 1 <" a $end
$var wire 1 =" aOb $end
$var wire 1 >" aXb $end
$var wire 1 ?" aXbANDcin $end
$var wire 1 @" b $end
$var wire 1 A" cin $end
$var wire 1 B" cout $end
$var wire 1 C" out $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 D" i $end
$scope module Adder_i $end
$var wire 1 E" a $end
$var wire 1 F" aOb $end
$var wire 1 G" aXb $end
$var wire 1 H" aXbANDcin $end
$var wire 1 I" b $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" out $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 M" i $end
$scope module Adder_i $end
$var wire 1 N" a $end
$var wire 1 O" aOb $end
$var wire 1 P" aXb $end
$var wire 1 Q" aXbANDcin $end
$var wire 1 R" b $end
$var wire 1 S" cin $end
$var wire 1 T" cout $end
$var wire 1 U" out $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 V" i $end
$scope module Adder_i $end
$var wire 1 W" a $end
$var wire 1 X" aOb $end
$var wire 1 Y" aXb $end
$var wire 1 Z" aXbANDcin $end
$var wire 1 [" b $end
$var wire 1 \" cin $end
$var wire 1 ]" cout $end
$var wire 1 ^" out $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 _" i $end
$scope module Adder_i $end
$var wire 1 `" a $end
$var wire 1 a" aOb $end
$var wire 1 b" aXb $end
$var wire 1 c" aXbANDcin $end
$var wire 1 d" b $end
$var wire 1 e" cin $end
$var wire 1 f" cout $end
$var wire 1 g" out $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 h" i $end
$scope module Adder_i $end
$var wire 1 i" a $end
$var wire 1 j" aOb $end
$var wire 1 k" aXb $end
$var wire 1 l" aXbANDcin $end
$var wire 1 m" b $end
$var wire 1 n" cin $end
$var wire 1 o" cout $end
$var wire 1 p" out $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 q" i $end
$scope module Adder_i $end
$var wire 1 r" a $end
$var wire 1 s" aOb $end
$var wire 1 t" aXb $end
$var wire 1 u" aXbANDcin $end
$var wire 1 v" b $end
$var wire 1 w" cin $end
$var wire 1 x" cout $end
$var wire 1 y" out $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 z" i $end
$scope module Adder_i $end
$var wire 1 {" a $end
$var wire 1 |" aOb $end
$var wire 1 }" aXb $end
$var wire 1 ~" aXbANDcin $end
$var wire 1 !# b $end
$var wire 1 "# cin $end
$var wire 1 ## cout $end
$var wire 1 $# out $end
$upscope $end
$upscope $end
$scope module Adder $end
$var wire 1 %# a $end
$var wire 1 &# aOb $end
$var wire 1 '# aXb $end
$var wire 1 (# aXbANDcin $end
$var wire 1 )# b $end
$var wire 1 3 cin $end
$var wire 1 *# cout $end
$var wire 1 +# out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10011 z"
b10010 q"
b10001 h"
b10000 _"
b1111 V"
b1110 M"
b1101 D"
b1100 ;"
b1011 2"
b1010 )"
b1001 ~
b1000 u
b111 l
b110 c
b101 Z
b100 Q
b11 H
b10 ?
b1 6
$end
#0
$dumpvars
x+#
x*#
x)#
0(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x}
x|
x{
xz
xy
xx
xw
xv
xt
xs
xr
xq
xp
xo
xn
xm
xk
xj
xi
xh
xg
xf
xe
xd
xb
xa
x`
x_
x^
x]
x\
x[
xY
xX
xW
xV
xU
xT
xS
xR
xP
xO
xN
xM
xL
xK
xJ
xI
xG
xF
xE
xD
xC
xB
xA
x@
x>
x=
x<
x;
x:
x9
x8
x7
bx 5
bx 4
03
bx 2
bx 1
bx 0
bx /
x.
bx -
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
$end
#10
0G
0P
0Y
0b
0k
0t
0}
0("
01"
0:"
0C"
0L"
0U"
0^"
0g"
0p"
0y"
0$#
0E
0N
0W
0`
0i
0r
0{
0&"
0/"
08"
0A"
0J"
0S"
0\"
0e"
0n"
0w"
0"#
0.
0>
0=
0F
0O
0X
0a
0j
0s
0|
0'"
00"
09"
0B"
0K"
0T"
0]"
0f"
0o"
0x"
0##
0<
0:
0C
0L
0U
0^
0g
0p
0y
0$"
0-"
06"
0?"
0H"
0Q"
0Z"
0c"
0l"
0u"
0~"
b0 -
b0 4
0+#
b0 5
0*#
09
08
0B
0A
0K
0J
0T
0S
0]
0\
0f
0e
0o
0n
0x
0w
0#"
0""
0,"
0+"
05"
04"
0>"
0="
0G"
0F"
0P"
0O"
0Y"
0X"
0b"
0a"
0k"
0j"
0t"
0s"
0}"
0|"
0'#
0&#
0"
0;
0D
0M
0V
0_
0h
0q
0z
0%"
0."
07"
0@"
0I"
0R"
0["
0d"
0m"
0v"
0!#
0)#
07
0@
0I
0R
0[
0d
0m
0v
0!"
0*"
03"
0<"
0E"
0N"
0W"
0`"
0i"
0r"
0{"
0%#
0)
0*
0!
0(
0'
0&
b0 0
b0 2
b0 /
b0 1
0,
0+
0%
0$
0#
#20
1>
1G
1P
1Y
1b
1k
1t
1}
1("
11"
1:"
1C"
1L"
1U"
1^"
1g"
1p"
1y"
b1111111111111111111 -
b1111111111111111111 4
1+#
19
1B
1K
1T
1]
1f
1o
1x
1#"
1,"
15"
1>"
1G"
1P"
1Y"
1b"
1k"
1t"
1'#
1!
1;
1D
1M
1V
1_
1h
1q
1z
1%"
1."
17"
1@"
1I"
1R"
1["
1d"
1m"
1v"
1)#
1)
1'
b1111111111111111111 0
b1111111111111111111 2
1,
1$
#30
17
1@
1I
1R
1[
1d
1m
1v
1!"
1*"
13"
1<"
1E"
1N"
1W"
1`"
1i"
1r"
1%#
0;
0D
0M
0V
0_
0h
0q
0z
0%"
0."
07"
0@"
0I"
0R"
0["
0d"
0m"
0v"
0)#
b1111111111111111111 /
b1111111111111111111 1
b0 0
b0 2
0,
1+
0$
1#
#40
1$#
1E
1N
1W
1`
1i
1r
1{
1&"
1/"
18"
1A"
1J"
1S"
1\"
1e"
1n"
1w"
1"#
1<
1>
1=
1G
1F
1P
1O
1Y
1X
1b
1a
1k
1j
1t
1s
1}
1|
1("
1'"
11"
10"
1:"
19"
1C"
1B"
1L"
1K"
1U"
1T"
1^"
1]"
1g"
1f"
1p"
1o"
1y"
1x"
b11111111111111111110 -
b11111111111111111110 4
0+#
b1111111111111111111 5
1*#
09
18
0B
1A
0K
1J
0T
1S
0]
1\
0f
1e
0o
1n
0x
1w
0#"
1""
0,"
1+"
05"
14"
0>"
1="
0G"
1F"
0P"
1O"
0Y"
1X"
0b"
1a"
0k"
1j"
0t"
1s"
0'#
1&#
0!
1"
1;
1D
1M
1V
1_
1h
1q
1z
1%"
1."
17"
1@"
1I"
1R"
1["
1d"
1m"
1v"
1)#
0)
1*
0'
1&
b1111111111111111111 0
b1111111111111111111 2
1,
1$
#50
0G
0Y
0k
0}
01"
0C"
0U"
0g"
b10101010101010101010 -
b10101010101010101010 4
0y"
0E
0W
0i
0{
0/"
0A"
0S"
0e"
0w"
0=
0O
0a
0s
0'"
09"
0K"
0]"
b1010101010101010101 5
0o"
08
0J
0\
0n
0""
04"
0F"
0X"
0j"
0"
0;
0M
0_
0q
0%"
07"
0I"
0["
0m"
07
0I
0[
0m
0!"
03"
0E"
0W"
0i"
1!
0&
b1010101010101010101 0
b1010101010101010101 2
b1010101010101010101 /
b1010101010101010101 1
1%
0$
0#
#60
1"
0!
1(
1'
1$
#70
0$
1#
#80
1!
0(
0'
1&
1$
#90
